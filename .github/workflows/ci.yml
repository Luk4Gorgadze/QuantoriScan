name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Debug Secrets Availability
        run: |
          if [ -n "${{ secrets.POSTGRES_USER }}" ]; then
            echo "POSTGRES_USER is set"
          else
            echo "POSTGRES_USER is not set"
          fi
          if [ -n "${{ secrets.POSTGRES_PASSWORD }}" ]; then
            echo "POSTGRES_PASSWORD is set"
          else
            echo "POSTGRES_PASSWORD is not set"
          fi
          if [ -n "${{ secrets.POSTGRES_DB }}" ]; then
            echo "POSTGRES_DB is set"
          else
            echo "POSTGRES_DB is not set"
          fi

      - name: Create and verify .env file
        run: |
          # Create .env file
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}" >> .env

          # Verify .env file exists and has content (without showing sensitive data)
          echo "Checking .env file:"
          if [ -f .env ]; then
            echo ".env file exists"
            echo "Number of lines in .env: $(wc -l < .env)"
          else
            echo ".env file does not exist"
          fi

          # Show current directory contents
          echo "Directory contents:"
          ls -la

      - name: Build and run Docker Compose services
        run: |
          # Verify .env file location and content before docker-compose
          pwd
          echo "Current directory contents:"
          ls -la
          echo "Docker Compose command about to run..."
          docker-compose -f docker-compose.yml up --build -d

      - name: Install dependencies for linting
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run mypy check
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          mypy --config-file mypy.ini app

      - name: Wait for services to be ready
        run: |
          timeout 30s bash -c 'until docker-compose exec -T db pg_isready -U ${{ secrets.POSTGRES_USER }}; do sleep 1; done'

      - name: Run tests inside Docker container
        run: |
          docker-compose exec -T web pytest app/tests

      - name: Stop and remove Docker Compose services
        if: always()
        run: |
          docker-compose down
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to AWS ec2 instance
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
        run: |
          ssh $USER@$HOST << EOF
            cd ~/quantori_scan/QuantoriScan
            git pull
            sudo docker compose build
            sudo docker compose up -d --remove-orphans
            sudo docker builder prune -f
            sudo docker image prune -f
          EOF
